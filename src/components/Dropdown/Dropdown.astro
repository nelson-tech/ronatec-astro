---
interface Props {
  id: string
}

const { id } = Astro.props
---

<script>
  class Dropdown extends HTMLElement {
    constructor() {
      super()

      let open = false

      const id = this.dataset.id
      const panel = document.getElementById(id ?? "")

      //Add event listeners to close dropdown when clicking on internal links
      const buttons = panel?.querySelectorAll("button")
      buttons?.forEach((link) => {
        link.addEventListener("click", () => {
          closePanel()
        })
      })

      const links = panel?.querySelectorAll("a")
      links?.forEach((link) => {
        link.addEventListener("click", () => {
          console.log("click")
          closePanel()
        })
      })

      // Click outside
      const isVisible = () =>
        !!(
          this.offsetWidth ||
          this.offsetHeight ||
          this.getClientRects().length
        )

      const outsideClickListener = (event: MouseEvent) => {
        if (
          event.target &&
          !this.contains(event.target as Node) &&
          isVisible()
        ) {
          closePanel()
        }
      }

      const openPanel = () => {
        open = true
        if (panel) {
          panel.classList.remove("hidden")
          setTimeout(() => {
            panel.classList.replace("opacity-0", "opacity-100")
            panel.classList.replace("-translate-y-4", "translate-y-0")
            panel.classList.replace("scale-y-80", "scale-y-100")
          }, 20)
        }
        document.addEventListener("click", outsideClickListener)
      }

      const closePanel = () => {
        open = false
        if (panel) {
          panel.classList.replace("opacity-100", "opacity-0")
          panel.classList.replace("translate-y-0", "-translate-y-4")
          panel.classList.replace("scale-y-100", "scale-y-80")
          setTimeout(() => {
            panel.classList.add("hidden")
          }, 300)
        }
        document.removeEventListener("click", outsideClickListener)
      }

      const button = this.querySelector("button")
      button?.addEventListener("click", () => {
        if (!open) {
          openPanel()
        } else {
          closePanel()
        }
      })
    }
  }

  customElements.define("dropdown-button", Dropdown)
</script>

<dropdown-button data-id={id + "-panel"} class="relative">
  <slot name="button" />
  <div
    id={id + "-panel"}
    class="hidden opacity-0 -translate-y-4 scale-y-80 duration-300 transition-all"
  >
    <slot name="panel" />
  </div>
</dropdown-button>
