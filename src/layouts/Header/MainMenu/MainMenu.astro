---
import type { MainMenuLink } from "@/api/types"
import DropdownMenu from "./DropdownMenu"

interface Props {
  menuItems: MainMenuLink
}

const { menuItems } = Astro.props

const pathname = Astro.url.pathname
---

<div
  class="hidden h-full lg:flex items-center space-x-2 text-sm font-medium text-gray-600 ml-8"
>
  {
    menuItems?.map((menuItem) => {
      const { link, id } = menuItem

      const linkUrl =
        link.type === "reference" && typeof link.reference?.value === "object"
          ? link.reference?.value.slug ?? "/"
          : link?.url ?? "/"

      const current = linkUrl !== "/" && linkUrl !== "#" && linkUrl === pathname

      const style = (open: boolean) =>
        `transition-colors ease-out duration-200 py-2 px-3 rounded outline-none ${
          open || current ? "bg-gray-100" : "hover:bg-gray-100"
        } text-gray-900 font-medium inline-flex items-center`

      if (link.children && link.children.length > 0) {
        if (link?.megaMenu) {
          // Mega Menu Column

          const headerStyle = "font-[900] text-base text-gray-900"
          return (
            <DropdownMenu {menuItem}>
              <button class={style(false)} slot="button">
                {link.label}
                <span class="rotate-0 transition-transform duration-300 ml-1 w-4 h-4 text-gray-400">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M19.5 8.25l-7.5 7.5-7.5-7.5"
                    />
                  </svg>
                </span>

                <slot />
              </button>

              <div
                class=" text-gray-500 sm:text-sm absolute left-[-10rem] z-40 mt-3 w-screen max-w-sm md:max-w-3xl lg:max-w-[63rem]
                overflow-hidden rounded shadow-lg ring-1 ring-black ring-opacity-5
                grid grid-cols-3 min-w-full bg-white pl-8 pt-6 pb-6"
                slot="panel"
              >
                {link.children.map((column) => {
                  if (column.children && column.megaColumn) {
                    return (
                      <div class="">
                        {column.children.map(
                          ({ label, url, children, type }, subIndex) => (
                            <div
                              class={
                                " " +
                                (subIndex > 0
                                  ? "mt-8"
                                  : label === "Browse All"
                                  ? "mb-8"
                                  : "")
                              }
                            >
                              {type !== "textOnly" ? (
                                <div
                                  class={"font-bold text-base text-gray-900"}
                                >
                                  <a
                                    href={url ? (url === "#" ? "" : url) : ""}
                                    rel="prefetch-intent"
                                    title={label}
                                    class={`${
                                      label === "Browse All"
                                        ? "text-accent hover:text-highlight"
                                        : "hover:text-accent"
                                    }  transition`}
                                  >
                                    {label}
                                  </a>
                                </div>
                              ) : (
                                <div class={headerStyle}>
                                  <div title={label}>{label}</div>
                                </div>
                              )}

                              <ul role="list" class="">
                                {children?.map((item) => (
                                  <li class="flex w-full group">
                                    <a
                                      rel="prefetch-intent"
                                      href={item.url ?? ""}
                                      title={item.label}
                                      class="w-full hover:text-highlight"
                                    >
                                      <div class="py-2 w-full">
                                        {item.label}
                                      </div>
                                    </a>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          )
                        )}
                      </div>
                    )
                  }
                })}
              </div>
            </DropdownMenu>
          )
        } else {
          return (
            <DropdownMenu {menuItem}>
              <button class={style(false)} slot="button">
                {menuItem.link.label}
                <span class="rotate-0 transition-transform duration-300 ml-1 w-4 h-4 text-gray-400">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M19.5 8.25l-7.5 7.5-7.5-7.5"
                    />
                  </svg>
                </span>
              </button>
              <div
                class="z-40 origin-top absolute -left-1/2 w-48 mt-2
            rounded bg-white outline-none overflow-hidden shadow-lg ring-1 ring-black ring-opacity-5"
                slot="panel"
              >
                {menuItem.link.children?.map((childLink) => (
                  <a
                    rel="prefetch-intent"
                    href={childLink?.url ?? ""}
                    title={childLink?.label ?? undefined}
                    class="transition hover:bg-accent hover:text-white text-gray-700 block px-4 py-2 text-sm ring-transparent outline-none"
                  >
                    {childLink?.label}
                  </a>
                ))}
              </div>
            </DropdownMenu>
          )
        }
      } else {
        return (
          link?.label && (
            <div class="relative">
              <a
                rel="prefetch-intent"
                href={linkUrl}
                title={link.label}
                class={style(false)}
              >
                {link.label}
                <slot />
              </a>
            </div>
          )
        )
      }
    })
  }
</div>
